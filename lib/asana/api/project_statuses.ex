# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Asana.Api.ProjectStatuses do
  @moduledoc """
  API calls for all endpoints tagged `ProjectStatuses`.
  """

  alias Asana.Connection
  import Asana.RequestBuilder


  @doc """
  Create a project status
  Creates a new status update on the project. Returns the full record of the newly created project status update.

  ## Parameters

  - connection (Asana.Connection): Connection to server
  - project_gid (integer()): The project to get statuses from.
  - inline_object6 (InlineObject6): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Asana.Model.ProjectStatusObject.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_project_status(Tesla.Env.client, integer(), Asana.Model.InlineObject6.t, keyword()) :: {:ok, Asana.Model.Error.t} | {:ok, Asana.Model.ProjectStatusObject.t} | {:error, Tesla.Env.t}
  def create_project_status(connection, project_gid, inline_object6, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/projects/#{project_gid}/project_statuses")
    |> add_param(:body, :body, inline_object6)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %Asana.Model.ProjectStatusObject{}},
      { 400, %Asana.Model.Error{}},
      { 401, %Asana.Model.Error{}},
      { 403, %Asana.Model.Error{}},
      { 404, %Asana.Model.Error{}},
      { "5XX", %Asana.Model.Error{}},
      { :default, %Asana.Model.Error{}}
    ])
  end

  @doc """
  Delete a project status
  Deletes a specific, existing project status update.  Returns an empty data record.

  ## Parameters

  - connection (Asana.Connection): Connection to server
  - project_gid (integer()): The project to get statuses from.
  - project_status_gid (integer()): The project status update to get.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Asana.Model.EmptyObject.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_product_status(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, Asana.Model.EmptyObject.t} | {:ok, Asana.Model.Error.t} | {:error, Tesla.Env.t}
  def delete_product_status(connection, project_gid, project_status_gid, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/project_statuses/#{project_status_gid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Asana.Model.EmptyObject{}},
      { 400, %Asana.Model.Error{}},
      { 401, %Asana.Model.Error{}},
      { 403, %Asana.Model.Error{}},
      { 404, %Asana.Model.Error{}},
      { "5XX", %Asana.Model.Error{}},
      { :default, %Asana.Model.Error{}}
    ])
  end

  @doc """
  Get a project status
  Returns the complete record for a single status update.

  ## Parameters

  - connection (Asana.Connection): Connection to server
  - project_gid (integer()): The project to get statuses from.
  - project_status_gid (integer()): The project status update to get.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Asana.Model.ProjectStatusObject.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_product_status(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, Asana.Model.Error.t} | {:ok, Asana.Model.ProjectStatusObject.t} | {:error, Tesla.Env.t}
  def get_product_status(connection, project_gid, project_status_gid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/project_statuses/#{project_status_gid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Asana.Model.ProjectStatusObject{}},
      { 400, %Asana.Model.Error{}},
      { 401, %Asana.Model.Error{}},
      { 403, %Asana.Model.Error{}},
      { 404, %Asana.Model.Error{}},
      { "5XX", %Asana.Model.Error{}},
      { :default, %Asana.Model.Error{}}
    ])
  end

  @doc """
  Get a project's statuses
  Returns the compact project status update records for all updates on the project.

  ## Parameters

  - connection (Asana.Connection): Connection to server
  - project_gid (integer()): The project to get statuses from.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Asana.Model.ProjectStatusArray.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_product_statuses(Tesla.Env.client, integer(), keyword()) :: {:ok, Asana.Model.Error.t} | {:ok, Asana.Model.ProjectStatusArray.t} | {:error, Tesla.Env.t}
  def get_product_statuses(connection, project_gid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/projects/#{project_gid}/project_statuses")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Asana.Model.ProjectStatusArray{}},
      { 400, %Asana.Model.Error{}},
      { 401, %Asana.Model.Error{}},
      { 403, %Asana.Model.Error{}},
      { 404, %Asana.Model.Error{}},
      { "5XX", %Asana.Model.Error{}},
      { :default, %Asana.Model.Error{}}
    ])
  end
end
